#!/usr/bin/env ruby

# Copyright (c) 2011, Dustin Barker <dustin.barker@gmail.com>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the project nor the
#    names of its contributors may be used to endorse or promote products
#    derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

TASKS_FILE = ".gitdone"
TASKS_PATH = File.join [ ENV['HOME'], TASKS_FILE ]

def tasks_file(mode, &block)
  File.open(TASKS_PATH, mode, 0644) { |f| yield f }
end

def tasks
  tasks_file("r") { |f|
    f.readlines
  }
end

def add(task)
  tasks_file("a+") { |f|
    f.puts(task)
  }
end

def write_tasks(tasks)
  tasks_file("w+") { |f|
    tasks.each { |task|
      f.puts task
    }
  }
end

def rm(taskid)
  all_tasks = tasks
  all_tasks.delete_at(taskid)
  write_tasks(all_tasks)
end

def list
  if tasks.size == 0
    puts "No tasks."
    puts "To add a task, type: git add '<task>'"
  else
    tasks.each_with_index { |task, i| puts "#{i} #{task}" }
  end
end

def top
  tasks[0]
end

def commit(task_id)
  puts `git commit -am '#{tasks[task_id]}'`
  if $? == 0
    rm task_id
  end
end

def edit
  exec "#{ENV['EDITOR']} #{TASKS_PATH}"
end

case ARGV[0]
  when "add"
    if ARGV.size == 2
      add ARGV[1]
      puts "Added task: #{ARGV[1]}"
    else
      if ARGV.size < 2
        puts "Not enough arguments."
      else
        puts "Too many arguments."
      end
      puts "usage: gitdone add PATH"
    end
  when "rm"
    if ARGV[1]
      rm ARGV[1].to_i
    else
      puts "Not enough arguments."
      puts "usage: gitdone rm PATH"
    end
  when "edit"
    edit
  when "list"
    list
  when "top"
    puts top
  when "commit"
    commit(ARGV[1].to_i)
  when nil
    puts <<eos
usage: git <command>

The most commonly used commands are:
     add    Plan a commit
     list   Show planned commits
     next   Show next commit
     commit Execute (git commit -am <message>) next commit

eos
  else
    puts "Unknown command: #{ARGV[0]}"
    puts "Type gitdone help' for usage." 
end 

